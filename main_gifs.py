from function_store import *
from parameters import gifs_parameters
import random


#############################################
#                                           #
#    DO NOT EDIT THIS FILE!                 #
#                                           #
#############################################

# ------------------------------------------------------------------------------ #

# Improvement ideas:
# - How to space out multiple starting regular polygons for the multiple nodes in a G-IFS?
# - currently for 2D, the spaces are  [[0,0] [1,1]], [[1,1] [2,2]], [[2,2] [3,3]] etc. when it would probably be better
#       to place them filling up rows then columns: [[0,0] [1,1]], [[1,0] [2,0]], [[0,1] [1,1]], [[1,1] [2,1]] etc.
# - Is there any way to reduce the size of the image if there are overlaps, i.e. can we flatten it?
# - What about some kind of encoding - of either the parameters (rotation etc) or the dimensions?
# - Could this even be taken further - some kind of service that generates a fractal with the desired properties,
#   e.g. with dimension given by 1.[dd/mm/yyyy] and delivered at resolution large enough for printing?
# - Automating fractal generation is a good idea regardless
# - Improving the appearance:
#   - Colouring the background of the image, or colouring according to the route taken to get to the sub-cover?
#   - Noting sensible ways of creating figures that will likely be aesthetically pleasing?
#       Probably we would prefer a dimension of about 1.8 - 2.0.
#   - Layering multiple fractals on top of each other to create a coloured composite image?

# ------------------------------------------------------------------------------ #

def new_gifs_program():
    # import specification from parameters.py file
    para_num_iterations = gifs_parameters["num_iterations"]
    para_num_nodes = gifs_parameters["num_nodes"]
    para_alpha = gifs_parameters["alpha"]
    para_contractions = gifs_parameters["contractions"]
    para_polygon_order = gifs_parameters["polygon_order"]
    para_initial_angle = gifs_parameters["initial_angle"]

    # generate random seeds and save them
    np_seed = np.random.randint(4294967296)
    random_seed = np.random.randint(4294967296)
    np.random.seed(np_seed)
    random.seed(random_seed)
    metadata = {
        "numpy_seed": np_seed,
        "random_seed": random_seed,
    }

    # execute
    sim_number = generate_simulation_number()
    save_input(sim_number=sim_number, metadata=metadata)
    start_node_dict_history = initialise_dictionary(num_nodes=para_num_nodes, polygon_order=para_polygon_order,
                                                    initial_angle=para_initial_angle)
    final_node_dict_history = generate_gifs(node_dict_history=start_node_dict_history, contractions=para_contractions,
                                            num_iterations=para_num_iterations, num_nodes=para_num_nodes,
                                            alpha=para_alpha, polygon_order=para_polygon_order, sim_number=sim_number)
    final_dict = final_node_dict_history[-1]
    create_output(sim_number=sim_number, node_dict=final_dict)


new_gifs_program()

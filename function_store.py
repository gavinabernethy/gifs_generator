import numpy as np
import matplotlib.pyplot as plt
from matplotlib import use as mpl_use
from matplotlib.patches import Polygon
import os.path
import shutil
import json

#############################################
#                                           #
#    DO NOT EDIT THIS FILE!                 #
#                                           #
#############################################

# ------------------------------------------------------------------------------ #

# record keeping
def generate_simulation_number(minimum=99, save_data=True):
    # finds the next simulation number, and generates the required folder structure
    sim_number = minimum
    is_folder_used = True
    while is_folder_used:
        sim_number += 1
        folder_path = f'results/{sim_number}'
        if not os.path.exists(folder_path):
            is_folder_used = False
            if save_data:
                os.makedirs(folder_path)
    return sim_number


def save_input(sim_number, metadata):
    # Save the parameters
    output_directory = f"results/{sim_number}"
    shutil.copy("parameters.py", output_directory)
    # save the random seeds
    metadata_file = f"results/{sim_number}/metadata.json"
    dump_json(data=metadata, filename=metadata_file)


def dump_json(data, filename):
    with safe_open_w(filename) as f:
        json.dump(data, f, ensure_ascii=False, skipkeys=True)


def safe_open_w(path):
    # Open "path" for writing, creating any parent directories as needed.
    os.makedirs(os.path.dirname(path), exist_ok=True)
    return open(path, 'w')


# ------------------------------------------------------------------------------ #

def initialise_dictionary(num_nodes, polygon_order, initial_angle):
    # initialisation
    node_dict_history = []

    node_dict = {}
    for node in range(num_nodes):
        # 2D sub-cover format [ [x0, y0], [x1, y1], [x2, y2], [x3, y3] ]  # proceed anticlockwise.
        rotation = 2 * np.pi / polygon_order
        radius = 0.5
        sub_cover_list = []
        for next_vertex in range(polygon_order):
            x_val = node + radius * np.cos(initial_angle + next_vertex * rotation)
            y_val = node + radius * np.sin(initial_angle + next_vertex * rotation)
            sub_cover_list.append(np.array([x_val, y_val]))
        node_dict[node] = [sub_cover_list]
    node_dict_history.append(node_dict)
    return node_dict_history


# ------------------------------------------------------------------------------ #

def generate_gifs(node_dict_history, contractions, num_iterations, num_nodes, alpha, polygon_order, sim_number):
    # iterate G-IFS
    for iteration in range(num_iterations):
        print(f'{sim_number}: Iteration: Beginning iteration: {iteration}.')
        # previous dictionary
        node_dict = node_dict_history[-1]
        # next dictionary to populate
        new_node_dict = {x: [] for x in range(num_nodes)}

        # iterate contraction
        for contr_index, contraction in enumerate(contractions):

            # identify which nodes the current contraction maps between
            node_start = contraction["edge"][0]
            node_end = contraction["edge"][1]

            # apply this contraction to all eligible sub-covers
            for sub_cover in node_dict[node_start]:

                # apply function to the vertices of this sub-cover
                new_sub_cover = np.zeros([polygon_order, 2])
                for vertex_index in range(polygon_order):
                    vertex = sub_cover[vertex_index]
                    new_x = contraction["function_x"](vertex[0] - node_start, vertex[1] - node_start, alpha) + node_end
                    new_y = contraction["function_y"](vertex[0] - node_start, vertex[1] - node_start, alpha) + node_end
                    new_sub_cover[vertex_index] = [new_x, new_y]

                # store in the new dictionary of lists of resulting sub-covers
                new_node_dict[node_end].append(new_sub_cover)

            print(f'{sim_number}: Iteration: Completed contraction {contr_index}/{len(contractions)} '
                  f'for iteration {iteration}.')

        node_dict = new_node_dict
        node_dict_history.append(node_dict)
    return node_dict_history


# ------------------------------------------------------------------------------ #

def create_output(sim_number, node_dict):
    # Draw output
    mpl_use('MacOSX')
    fig, ax = plt.subplots()
    print(f'{sim_number}: Figure: Beginning construction.')
    min_x = 0
    min_y = 0
    max_x = 0
    max_y = 0
    for node in node_dict:
        num_sub_covers = len(node_dict[node])
        for index, sub_cover in enumerate(node_dict[node]):
            polygon = Polygon(xy=sub_cover, closed=True, facecolor='black')
            ax.add_patch(polygon)
            for vertex in sub_cover:
                min_x = min(min_x, vertex[0])
                max_x = max(max_x, vertex[0])
                min_y = min(min_y, vertex[1])
                max_y = max(max_y, vertex[1])
            if index % 1000 == 0:
                print(f'{sim_number}: Figure: Completed sub_cover {index}/{num_sub_covers} for node {node}.')

    print(f'{sim_number}: Figure: Beginning saving file...')
    plt.xlim([min_x, max_x])
    plt.ylim([min_y, max_y])
    plt.axis('off')

    image_file_path = f"results/{sim_number}/gifs_{sim_number}_fig.pdf"
    plt.savefig(image_file_path, dpi=1200)
    plt.close(fig)
    print(f'{sim_number}: Figure: File save complete.\n')
